{"ast":null,"code":"import { hrTimeToFixed64Nanos } from '../common';\nimport { toAttributes } from '../common/internal';\nimport * as core from '@opentelemetry/core';\nexport function sdkSpanToOtlpSpan(span, useHex) {\n  var _a;\n  var ctx = span.spanContext();\n  var status = span.status;\n  var parentSpanId = useHex ? span.parentSpanId : span.parentSpanId != null ? core.hexToBase64(span.parentSpanId) : undefined;\n  return {\n    traceId: useHex ? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex ? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    traceState: (_a = ctx.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToFixed64Nanos(span.startTime),\n    endTimeUnixNano: hrTimeToFixed64Nanos(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code,\n      message: status.message\n    },\n    links: span.links.map(function (link) {\n      return toOtlpLink(link, useHex);\n    }),\n    droppedLinksCount: span.droppedLinksCount\n  };\n}\nexport function toOtlpLink(link, useHex) {\n  var _a;\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex ? link.context.spanId : core.hexToBase64(link.context.spanId),\n    traceId: useHex ? link.context.traceId : core.hexToBase64(link.context.traceId),\n    traceState: (_a = link.context.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0\n  };\n}\nexport function toOtlpSpanEvent(timedEvent) {\n  return {\n    attributes: timedEvent.attributes ? toAttributes(timedEvent.attributes) : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToFixed64Nanos(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0\n  };\n}","map":{"version":3,"names":["hrTimeToFixed64Nanos","toAttributes","core","sdkSpanToOtlpSpan","span","useHex","ctx","spanContext","status","parentSpanId","hexToBase64","undefined","traceId","spanId","traceState","_a","serialize","name","kind","startTimeUnixNano","startTime","endTimeUnixNano","endTime","attributes","droppedAttributesCount","events","map","toOtlpSpanEvent","droppedEventsCount","code","message","links","link","toOtlpLink","droppedLinksCount","context","timedEvent","timeUnixNano","time"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/otlp-transformer/src/trace/internal.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport { hrTimeToFixed64Nanos } from '../common';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\nimport * as core from '@opentelemetry/core';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, useHex?: boolean): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  const parentSpanId = useHex\n    ? span.parentSpanId\n    : span.parentSpanId != null\n    ? core.hexToBase64(span.parentSpanId)\n    : undefined;\n  return {\n    traceId: useHex ? ctx.traceId : core.hexToBase64(ctx.traceId),\n    spanId: useHex ? ctx.spanId : core.hexToBase64(ctx.spanId),\n    parentSpanId: parentSpanId,\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: hrTimeToFixed64Nanos(span.startTime),\n    endTimeUnixNano: hrTimeToFixed64Nanos(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(toOtlpSpanEvent),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, useHex)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, useHex?: boolean): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: useHex\n      ? link.context.spanId\n      : core.hexToBase64(link.context.spanId),\n    traceId: useHex\n      ? link.context.traceId\n      : core.hexToBase64(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(timedEvent: TimedEvent): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: hrTimeToFixed64Nanos(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}