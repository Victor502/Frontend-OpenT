{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3MultiPropagator } from './B3MultiPropagator';\nimport { B3SinglePropagator } from './B3SinglePropagator';\nimport { B3_CONTEXT_HEADER } from './constants';\nimport { B3InjectEncoding } from './types';\n/**\n * Propagator that extracts B3 context in both single and multi-header variants,\n * with configurable injection format defaulting to B3 single-header. Due to\n * the asymmetry in injection and extraction formats this is not suitable to\n * be implemented as a composite propagator.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nvar B3Propagator = /** @class */function () {\n  function B3Propagator(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._b3MultiPropagator = new B3MultiPropagator();\n    this._b3SinglePropagator = new B3SinglePropagator();\n    if (config.injectEncoding === B3InjectEncoding.MULTI_HEADER) {\n      this._inject = this._b3MultiPropagator.inject;\n      this._fields = this._b3MultiPropagator.fields();\n    } else {\n      this._inject = this._b3SinglePropagator.inject;\n      this._fields = this._b3SinglePropagator.fields();\n    }\n  }\n  B3Propagator.prototype.inject = function (context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      return;\n    }\n    this._inject(context, carrier, setter);\n  };\n  B3Propagator.prototype.extract = function (context, carrier, getter) {\n    var header = getter.get(carrier, B3_CONTEXT_HEADER);\n    var b3Context = Array.isArray(header) ? header[0] : header;\n    if (b3Context) {\n      return this._b3SinglePropagator.extract(context, carrier, getter);\n    } else {\n      return this._b3MultiPropagator.extract(context, carrier, getter);\n    }\n  };\n  B3Propagator.prototype.fields = function () {\n    return this._fields;\n  };\n  return B3Propagator;\n}();\nexport { B3Propagator };","map":{"version":3,"names":["isTracingSuppressed","B3MultiPropagator","B3SinglePropagator","B3_CONTEXT_HEADER","B3InjectEncoding","B3Propagator","config","_b3MultiPropagator","_b3SinglePropagator","injectEncoding","MULTI_HEADER","_inject","inject","_fields","fields","prototype","context","carrier","setter","extract","getter","header","get","b3Context","Array","isArray"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/propagator-b3/src/B3Propagator.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3MultiPropagator } from './B3MultiPropagator';\nimport { B3SinglePropagator } from './B3SinglePropagator';\nimport { B3_CONTEXT_HEADER } from './constants';\nimport { B3InjectEncoding, B3PropagatorConfig } from './types';\n\n/**\n * Propagator that extracts B3 context in both single and multi-header variants,\n * with configurable injection format defaulting to B3 single-header. Due to\n * the asymmetry in injection and extraction formats this is not suitable to\n * be implemented as a composite propagator.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3Propagator implements TextMapPropagator {\n  private readonly _b3MultiPropagator: B3MultiPropagator =\n    new B3MultiPropagator();\n  private readonly _b3SinglePropagator: B3SinglePropagator =\n    new B3SinglePropagator();\n  private readonly _inject: (\n    context: Context,\n    carrier: unknown,\n    setter: TextMapSetter\n  ) => void;\n  public readonly _fields: string[];\n\n  constructor(config: B3PropagatorConfig = {}) {\n    if (config.injectEncoding === B3InjectEncoding.MULTI_HEADER) {\n      this._inject = this._b3MultiPropagator.inject;\n      this._fields = this._b3MultiPropagator.fields();\n    } else {\n      this._inject = this._b3SinglePropagator.inject;\n      this._fields = this._b3SinglePropagator.fields();\n    }\n  }\n\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    if (isTracingSuppressed(context)) {\n      return;\n    }\n    this._inject(context, carrier, setter);\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const header = getter.get(carrier, B3_CONTEXT_HEADER);\n    const b3Context = Array.isArray(header) ? header[0] : header;\n\n    if (b3Context) {\n      return this._b3SinglePropagator.extract(context, carrier, getter);\n    } else {\n      return this._b3MultiPropagator.extract(context, carrier, getter);\n    }\n  }\n\n  fields(): string[] {\n    return this._fields;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAsBA,SAASA,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,iBAAiB,QAAQ,aAAa;AAC/C,SAASC,gBAAgB,QAA4B,SAAS;AAE9D;;;;;;;AAOA,IAAAC,YAAA;EAYE,SAAAA,aAAYC,MAA+B;IAA/B,IAAAA,MAAA;MAAAA,MAAA,KAA+B;IAAA;IAX1B,KAAAC,kBAAkB,GACjC,IAAIN,iBAAiB,EAAE;IACR,KAAAO,mBAAmB,GAClC,IAAIN,kBAAkB,EAAE;IASxB,IAAII,MAAM,CAACG,cAAc,KAAKL,gBAAgB,CAACM,YAAY,EAAE;MAC3D,IAAI,CAACC,OAAO,GAAG,IAAI,CAACJ,kBAAkB,CAACK,MAAM;MAC7C,IAAI,CAACC,OAAO,GAAG,IAAI,CAACN,kBAAkB,CAACO,MAAM,EAAE;KAChD,MAAM;MACL,IAAI,CAACH,OAAO,GAAG,IAAI,CAACH,mBAAmB,CAACI,MAAM;MAC9C,IAAI,CAACC,OAAO,GAAG,IAAI,CAACL,mBAAmB,CAACM,MAAM,EAAE;;EAEpD;EAEAT,YAAA,CAAAU,SAAA,CAAAH,MAAM,GAAN,UAAOI,OAAgB,EAAEC,OAAgB,EAAEC,MAAqB;IAC9D,IAAIlB,mBAAmB,CAACgB,OAAO,CAAC,EAAE;MAChC;;IAEF,IAAI,CAACL,OAAO,CAACK,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACxC,CAAC;EAEDb,YAAA,CAAAU,SAAA,CAAAI,OAAO,GAAP,UAAQH,OAAgB,EAAEC,OAAgB,EAAEG,MAAqB;IAC/D,IAAMC,MAAM,GAAGD,MAAM,CAACE,GAAG,CAACL,OAAO,EAAEd,iBAAiB,CAAC;IACrD,IAAMoB,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM;IAE5D,IAAIE,SAAS,EAAE;MACb,OAAO,IAAI,CAACf,mBAAmB,CAACW,OAAO,CAACH,OAAO,EAAEC,OAAO,EAAEG,MAAM,CAAC;KAClE,MAAM;MACL,OAAO,IAAI,CAACb,kBAAkB,CAACY,OAAO,CAACH,OAAO,EAAEC,OAAO,EAAEG,MAAM,CAAC;;EAEpE,CAAC;EAEDf,YAAA,CAAAU,SAAA,CAAAD,MAAM,GAAN;IACE,OAAO,IAAI,CAACD,OAAO;EACrB,CAAC;EACH,OAAAR,YAAC;AAAD,CAAC,CA3CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}