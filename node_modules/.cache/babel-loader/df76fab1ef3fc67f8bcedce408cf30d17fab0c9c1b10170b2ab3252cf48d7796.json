{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nvar DEFAULT_TRACE_TIMEOUT = 10000;\nexport var DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport var DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport var DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport var DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(partialHeaders) {\n  if (partialHeaders === void 0) {\n    partialHeaders = {};\n  }\n  var headers = {};\n  Object.entries(partialHeaders).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n    }\n  });\n  return headers;\n}\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url, path) {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url) {\n  try {\n    var parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch (_a) {\n    diag.warn(\"Could not parse export URL: '\" + url + \"'\");\n    return url;\n  }\n}\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(timeoutMillis) {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\nfunction getExporterTimeoutFromEnv() {\n  var _a;\n  var definedTimeout = Number((_a = getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a !== void 0 ? _a : getEnv().OTEL_EXPORTER_OTLP_TIMEOUT);\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(timeout, defaultTimeout) {\n  diag.warn('Timeout must be greater than 0', timeout);\n  return defaultTimeout;\n}\nexport function isExportRetryable(statusCode) {\n  var retryCodes = [429, 502, 503, 504];\n  return retryCodes.includes(statusCode);\n}\nexport function parseRetryAfterToMills(retryAfter) {\n  if (retryAfter == null) {\n    return -1;\n  }\n  var seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  var delay = new Date(retryAfter).getTime() - Date.now();\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}","map":{"version":3,"names":["diag","getEnv","DEFAULT_TRACE_TIMEOUT","DEFAULT_EXPORT_MAX_ATTEMPTS","DEFAULT_EXPORT_INITIAL_BACKOFF","DEFAULT_EXPORT_MAX_BACKOFF","DEFAULT_EXPORT_BACKOFF_MULTIPLIER","parseHeaders","partialHeaders","headers","Object","entries","forEach","_a","_b","__read","key","value","String","warn","appendResourcePathToUrl","url","path","endsWith","appendRootPathToUrlIfNeeded","parsedUrl","URL","pathname","toString","configureExporterTimeout","timeoutMillis","invalidTimeout","getExporterTimeoutFromEnv","definedTimeout","Number","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_TIMEOUT","timeout","defaultTimeout","isExportRetryable","statusCode","retryCodes","includes","parseRetryAfterToMills","retryAfter","seconds","parseInt","isInteger","delay","Date","getTime","now"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/otlp-exporter-base/src/util.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(`Header \"${key}\" has wrong value and will be ignored`);\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}