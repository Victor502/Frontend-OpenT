{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { UnsignedLong } from './unsigned_long';\nexport * from './unsigned_long';\nvar NANOSECONDS = UnsignedLong.fromU32(1000000000);\nexport function hrTimeToFixed64Nanos(hrTime) {\n  return UnsignedLong.fromU32(hrTime[0]).multiply(NANOSECONDS).add(UnsignedLong.fromU32(hrTime[1]));\n}","map":{"version":3,"names":["UnsignedLong","NANOSECONDS","fromU32","hrTimeToFixed64Nanos","hrTime","multiply","add"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/otlp-transformer/src/common/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { IFixed64 } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { UnsignedLong } from './unsigned_long';\n\nexport * from './unsigned_long';\n\nconst NANOSECONDS = UnsignedLong.fromU32(1_000_000_000);\n\nexport function hrTimeToFixed64Nanos(hrTime: HrTime): IFixed64 {\n  return UnsignedLong.fromU32(hrTime[0])\n    .multiply(NANOSECONDS)\n    .add(UnsignedLong.fromU32(hrTime[1]));\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,cAAc,iBAAiB;AAE/B,IAAMC,WAAW,GAAGD,YAAY,CAACE,OAAO,CAAC,UAAa,CAAC;AAEvD,OAAM,SAAUC,oBAAoBA,CAACC,MAAc;EACjD,OAAOJ,YAAY,CAACE,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CACnCC,QAAQ,CAACJ,WAAW,CAAC,CACrBK,GAAG,CAACN,YAAY,CAACE,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}