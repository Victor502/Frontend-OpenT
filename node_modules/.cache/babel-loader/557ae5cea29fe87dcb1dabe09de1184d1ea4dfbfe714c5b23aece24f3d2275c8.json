{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils, _globalThis } from '@opentelemetry/core';\n/**\n * Collector Metric Exporter abstract base class\n */\nvar OTLPExporterBrowserBase = /** @class */function (_super) {\n  __extends(OTLPExporterBrowserBase, _super);\n  /**\n   * @param config\n   */\n  function OTLPExporterBrowserBase(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, config) || this;\n    _this._useXHR = false;\n    _this._useXHR = !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (_this._useXHR) {\n      _this._headers = Object.assign({}, parseHeaders(config.headers), baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS));\n    } else {\n      _this._headers = {};\n    }\n    return _this;\n  }\n  OTLPExporterBrowserBase.prototype.onInit = function () {\n    _globalThis.addEventListener('unload', this.shutdown);\n  };\n  OTLPExporterBrowserBase.prototype.onShutdown = function () {\n    _globalThis.removeEventListener('unload', this.shutdown);\n  };\n  OTLPExporterBrowserBase.prototype.send = function (items, onSuccess, onError) {\n    var _this = this;\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    var serviceRequest = this.convert(items);\n    var body = JSON.stringify(serviceRequest);\n    var promise = new Promise(function (resolve, reject) {\n      if (_this._useXHR) {\n        sendWithXhr(body, _this.url, _this._headers, _this.timeoutMillis, resolve, reject);\n      } else {\n        sendWithBeacon(body, _this.url, {\n          type: 'application/json'\n        }, resolve, reject);\n      }\n    }).then(onSuccess, onError);\n    this._sendingPromises.push(promise);\n    var popPromise = function () {\n      var index = _this._sendingPromises.indexOf(promise);\n      _this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  };\n  return OTLPExporterBrowserBase;\n}(OTLPExporterBase);\nexport { OTLPExporterBrowserBase };","map":{"version":3,"names":["OTLPExporterBase","parseHeaders","sendWithBeacon","sendWithXhr","diag","getEnv","baggageUtils","_globalThis","OTLPExporterBrowserBase","_super","__extends","config","_this","call","_useXHR","headers","navigator","sendBeacon","_headers","Object","assign","parseKeyPairsIntoRecord","OTEL_EXPORTER_OTLP_HEADERS","prototype","onInit","addEventListener","shutdown","onShutdown","removeEventListener","send","items","onSuccess","onError","_shutdownOnce","isCalled","debug","serviceRequest","convert","body","JSON","stringify","promise","Promise","resolve","reject","url","timeoutMillis","type","then","_sendingPromises","push","popPromise","index","indexOf","splice"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/OTLPExporterBrowserBase.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils, _globalThis } from '@opentelemetry/core';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterBrowserBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBase<OTLPExporterConfigBase, ExportItem, ServiceRequest> {\n  protected _headers: Record<string, string>;\n  private _useXHR: boolean = false;\n\n  /**\n   * @param config\n   */\n  constructor(config: OTLPExporterConfigBase = {}) {\n    super(config);\n    this._useXHR =\n      !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (this._useXHR) {\n      this._headers = Object.assign(\n        {},\n        parseHeaders(config.headers),\n        baggageUtils.parseKeyPairsIntoRecord(\n          getEnv().OTEL_EXPORTER_OTLP_HEADERS\n        )\n      );\n    } else {\n      this._headers = {};\n    }\n  }\n\n  onInit(): void {\n    _globalThis.addEventListener('unload', this.shutdown);\n  }\n\n  onShutdown(): void {\n    _globalThis.removeEventListener('unload', this.shutdown);\n  }\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const serviceRequest = this.convert(items);\n    const body = JSON.stringify(serviceRequest);\n\n    const promise = new Promise<void>((resolve, reject) => {\n      if (this._useXHR) {\n        sendWithXhr(\n          body,\n          this.url,\n          this._headers,\n          this.timeoutMillis,\n          resolve,\n          reject\n        );\n      } else {\n        sendWithBeacon(\n          body,\n          this.url,\n          { type: 'application/json' },\n          resolve,\n          reject\n        );\n      }\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}