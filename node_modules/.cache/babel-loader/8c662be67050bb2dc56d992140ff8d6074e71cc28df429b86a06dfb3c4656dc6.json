{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, BindOnceFuture } from '@opentelemetry/core';\nimport { configureExporterTimeout } from './util';\n/**\n * Collector Exporter abstract base class\n */\nvar OTLPExporterBase = /** @class */function () {\n  /**\n   * @param config\n   */\n  function OTLPExporterBase(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._sendingPromises = [];\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._concurrencyLimit = typeof config.concurrencyLimit === 'number' ? config.concurrencyLimit : Infinity;\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n    // platform dependent\n    this.onInit(config);\n  }\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  OTLPExporterBase.prototype.export = function (items, resultCallback) {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown')\n      });\n      return;\n    }\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached')\n      });\n      return;\n    }\n    this._export(items).then(function () {\n      resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }).catch(function (error) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: error\n      });\n    });\n  };\n  OTLPExporterBase.prototype._export = function (items) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        diag.debug('items to be sent', items);\n        _this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * Shutdown the exporter.\n   */\n  OTLPExporterBase.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  /**\n   * Exports any pending spans in the exporter\n   */\n  OTLPExporterBase.prototype.forceFlush = function () {\n    return Promise.all(this._sendingPromises).then(function () {\n      /** ignore resolved values */\n    });\n  };\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  OTLPExporterBase.prototype._shutdown = function () {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  };\n  return OTLPExporterBase;\n}();\nexport { OTLPExporterBase };","map":{"version":3,"names":["diag","ExportResultCode","BindOnceFuture","configureExporterTimeout","OTLPExporterBase","config","_sendingPromises","url","getDefaultUrl","hostname","shutdown","bind","_shutdownOnce","_shutdown","_concurrencyLimit","concurrencyLimit","Infinity","timeoutMillis","onInit","prototype","export","items","resultCallback","isCalled","code","FAILED","error","Error","length","_export","then","SUCCESS","catch","_this","Promise","resolve","reject","debug","send","e","call","forceFlush","all","onShutdown"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n  ServiceRequest,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : Infinity;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n  abstract convert(objects: ExportItem[]): ServiceRequest;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}