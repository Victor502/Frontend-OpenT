{"ast":null,"code":"import { Resource } from \"@opentelemetry/resources\";\nimport { SemanticResourceAttributes } from \"@opentelemetry/semantic-conventions\";\nimport { WebTracerProvider, SimpleSpanProcessor, ConsoleSpanExporter } from \"@opentelemetry/sdk-trace-web\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation\";\nimport { FetchInstrumentation } from \"@opentelemetry/instrumentation-fetch\";\nimport { B3Propagator, B3InjectEncoding } from \"@opentelemetry/propagator-b3\";\nimport { ZoneContextManager } from \"@opentelemetry/context-zone\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst consoleExporter = new ConsoleSpanExporter();\nconst collectorExporter = new OTLPTraceExporter({\n  url: \"https://collector.dev.icanbwell.com/v1/traces\" // where we want the spans to go must end in /v1/traces\n});\n\nconst provider = new WebTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: \"bWell.demo\" // process.env.REACT_APP_NAME,\n  })\n});\n\nconst fetchInstrumentation = new FetchInstrumentation({});\nfetchInstrumentation.setTracerProvider(provider);\nprovider.addSpanProcessor(new SimpleSpanProcessor(consoleExporter)); // comment out to stop sending spans to console\nprovider.addSpanProcessor(new SimpleSpanProcessor(collectorExporter));\nprovider.register({\n  contextManager: new ZoneContextManager(),\n  propagator: new B3Propagator({\n    injectEncoding: B3InjectEncoding.MULTI_HEADER\n  })\n});\nregisterInstrumentations({\n  instrumentations: [fetchInstrumentation],\n  tracerProvider: provider\n});\nexport function TraceProvider({\n  children\n}) {\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n}\n_c = TraceProvider;\nvar _c;\n$RefreshReg$(_c, \"TraceProvider\");","map":{"version":3,"names":["Resource","SemanticResourceAttributes","WebTracerProvider","SimpleSpanProcessor","ConsoleSpanExporter","OTLPTraceExporter","registerInstrumentations","FetchInstrumentation","B3Propagator","B3InjectEncoding","ZoneContextManager","Fragment","_Fragment","jsxDEV","_jsxDEV","consoleExporter","collectorExporter","url","provider","resource","SERVICE_NAME","fetchInstrumentation","setTracerProvider","addSpanProcessor","register","contextManager","propagator","injectEncoding","MULTI_HEADER","instrumentations","tracerProvider","TraceProvider","children","_c","$RefreshReg$"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/src/tracing.tsx"],"sourcesContent":["import { Resource } from \"@opentelemetry/resources\";\nimport { SemanticResourceAttributes } from \"@opentelemetry/semantic-conventions\";\nimport {\n  WebTracerProvider,\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n} from \"@opentelemetry/sdk-trace-web\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation\";\nimport { FetchInstrumentation } from \"@opentelemetry/instrumentation-fetch\";\nimport { B3Propagator, B3InjectEncoding } from \"@opentelemetry/propagator-b3\";\nimport { ZoneContextManager } from \"@opentelemetry/context-zone\";\n\nconst consoleExporter = new ConsoleSpanExporter();\nconst collectorExporter = new OTLPTraceExporter({\n  url: \"https://collector.dev.icanbwell.com/v1/traces\", // where we want the spans to go must end in /v1/traces\n});\n\nconst provider = new WebTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: \"bWell.demo\", // process.env.REACT_APP_NAME,\n  }),\n});\n\nconst fetchInstrumentation = new FetchInstrumentation({});\nfetchInstrumentation.setTracerProvider(provider);\nprovider.addSpanProcessor(new SimpleSpanProcessor(consoleExporter)); // comment out to stop sending spans to console\nprovider.addSpanProcessor(new SimpleSpanProcessor(collectorExporter));\nprovider.register({\n  contextManager: new ZoneContextManager(),\n  propagator: new B3Propagator({\n    injectEncoding: B3InjectEncoding.MULTI_HEADER,\n  }),\n});\n\nregisterInstrumentations({\n  instrumentations: [fetchInstrumentation],\n  tracerProvider: provider,\n});\n\ninterface TraceProviderProps {\n  children?: JSX.Element | undefined;\n}\n\nexport function TraceProvider({ children }: TraceProviderProps) {\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return <>{children}</>;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF,SACEC,iBAAiB,EACjBC,mBAAmB,EACnBC,mBAAmB,QACd,8BAA8B;AACrC,SAASC,iBAAiB,QAAQ,yCAAyC;AAC3E,SAASC,wBAAwB,QAAQ,gCAAgC;AACzE,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,8BAA8B;AAC7E,SAASC,kBAAkB,QAAQ,6BAA6B;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,eAAe,GAAG,IAAIX,mBAAmB,CAAC,CAAC;AACjD,MAAMY,iBAAiB,GAAG,IAAIX,iBAAiB,CAAC;EAC9CY,GAAG,EAAE,+CAA+C,CAAE;AACxD,CAAC,CAAC;;AAEF,MAAMC,QAAQ,GAAG,IAAIhB,iBAAiB,CAAC;EACrCiB,QAAQ,EAAE,IAAInB,QAAQ,CAAC;IACrB,CAACC,0BAA0B,CAACmB,YAAY,GAAG,YAAY,CAAE;EAC3D,CAAC;AACH,CAAC,CAAC;;AAEF,MAAMC,oBAAoB,GAAG,IAAId,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACzDc,oBAAoB,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;AAChDA,QAAQ,CAACK,gBAAgB,CAAC,IAAIpB,mBAAmB,CAACY,eAAe,CAAC,CAAC,CAAC,CAAC;AACrEG,QAAQ,CAACK,gBAAgB,CAAC,IAAIpB,mBAAmB,CAACa,iBAAiB,CAAC,CAAC;AACrEE,QAAQ,CAACM,QAAQ,CAAC;EAChBC,cAAc,EAAE,IAAIf,kBAAkB,CAAC,CAAC;EACxCgB,UAAU,EAAE,IAAIlB,YAAY,CAAC;IAC3BmB,cAAc,EAAElB,gBAAgB,CAACmB;EACnC,CAAC;AACH,CAAC,CAAC;AAEFtB,wBAAwB,CAAC;EACvBuB,gBAAgB,EAAE,CAACR,oBAAoB,CAAC;EACxCS,cAAc,EAAEZ;AAClB,CAAC,CAAC;AAMF,OAAO,SAASa,aAAaA,CAAC;EAAEC;AAA6B,CAAC,EAAE;EAC9D;EACA,oBAAOlB,OAAA,CAAAF,SAAA;IAAAoB,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB;AAACC,EAAA,GAHeF,aAAa;AAAA,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}