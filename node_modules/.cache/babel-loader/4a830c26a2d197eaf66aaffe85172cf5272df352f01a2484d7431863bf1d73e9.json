{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function hexToBase64(hexStr) {\n  var hexStrLen = hexStr.length;\n  var hexAsciiCharsStr = '';\n  for (var i = 0; i < hexStrLen; i += 2) {\n    var hexPair = hexStr.substring(i, i + 2);\n    var hexVal = parseInt(hexPair, 16);\n    hexAsciiCharsStr += String.fromCharCode(hexVal);\n  }\n  return btoa(hexAsciiCharsStr);\n}","map":{"version":3,"names":["hexToBase64","hexStr","hexStrLen","length","hexAsciiCharsStr","i","hexPair","substring","hexVal","parseInt","String","fromCharCode","btoa"],"sources":["/Users/victorhorton/Code/openTelemettry/front-end/node_modules/@opentelemetry/core/src/platform/browser/hex-to-base64.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function hexToBase64(hexStr: string): string {\n  const hexStrLen = hexStr.length;\n  let hexAsciiCharsStr = '';\n  for (let i = 0; i < hexStrLen; i += 2) {\n    const hexPair = hexStr.substring(i, i + 2);\n    const hexVal = parseInt(hexPair, 16);\n    hexAsciiCharsStr += String.fromCharCode(hexVal);\n  }\n  return btoa(hexAsciiCharsStr);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAM,SAAUA,WAAWA,CAACC,MAAc;EACxC,IAAMC,SAAS,GAAGD,MAAM,CAACE,MAAM;EAC/B,IAAIC,gBAAgB,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,IAAI,CAAC,EAAE;IACrC,IAAMC,OAAO,GAAGL,MAAM,CAACM,SAAS,CAACF,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAMG,MAAM,GAAGC,QAAQ,CAACH,OAAO,EAAE,EAAE,CAAC;IACpCF,gBAAgB,IAAIM,MAAM,CAACC,YAAY,CAACH,MAAM,CAAC;;EAEjD,OAAOI,IAAI,CAACR,gBAAgB,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}